package com.gaebal_easy.delivery.application.service.consumer;

import com.gaebal_easy.delivery.application.dto.kafkaConsumerDto.KafkaRequireAddressToHubDto;
import com.gaebal_easy.delivery.application.dto.kafkaConsumerDto.ProductRequestDto;
import com.gaebal_easy.delivery.application.dto.kafkaProducerDto.SlackMessageInfoDTO;
import com.gaebal_easy.delivery.application.feign.HubClient;
import com.gaebal_easy.delivery.application.feign.HubDirectDto;
import com.gaebal_easy.delivery.application.feign.HubRouteDto;
import com.gaebal_easy.delivery.application.service.DeliveryDetailService;
import com.gaebal_easy.delivery.application.service.DeliveryUserAssignmentService;
import com.gaebal_easy.delivery.application.service.producer.SlackMessageProducer;
import com.gaebal_easy.delivery.domain.entity.Delivery;
import com.gaebal_easy.delivery.domain.entity.DeliveryDetail;
import com.gaebal_easy.delivery.domain.entity.HubDeliveryUser;
import com.gaebal_easy.delivery.domain.entity.StoreDeliveryUser;
import com.gaebal_easy.delivery.domain.repository.DeliveryDetailRepository;
import com.gaebal_easy.delivery.domain.repository.DeliveryRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class HubRequireAddressConsumer {

    private final HubClient hubClient;
    private final DeliveryRepository deliveryRepository;
    private final DeliveryDetailRepository deliveryDetailRepository;
    private final DeliveryDetailService deliveryDetailService;
    private final DeliveryUserAssignmentService deliveryUserAssignmentService;
    private final SlackMessageProducer slackMessageProducer;


    @KafkaListener(topics="hub_require_address", groupId = "delivery_group",containerFactory = "requireAddressToHubKafkaListenerContainerFactory")
    public void hubRequireAddress(KafkaRequireAddressToHubDto kafkaRequireAddressToHubDto) {
        SlackMessageInfoDTO slackMessageInfoDTO = new SlackMessageInfoDTO();

        log.info("hubROuteDto!!!!!!!!!!"+kafkaRequireAddressToHubDto.getSupplyStoreHubName().substring(0,4) +" "+kafkaRequireAddressToHubDto.getReceiptStoreHubName().substring(0,4));
        HubRouteDto hubRouteDto = hubClient.getHubRoute(kafkaRequireAddressToHubDto.getSupplyStoreHubName().substring(0,4),
                kafkaRequireAddressToHubDto.getReceiptStoreHubName().substring(0,4));
        log.info("ÏµúÏ¢Ö ÏãúÍ∞Ñ " +hubRouteDto.getTotalRequiredTime());
        log.info("üì¶ HubRouteDto Ï†ïÎ≥¥: {}", hubRouteDto);

        log.info("3Î≤àÏß∏ ÏãúÎèÑ");

        log.info("Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!");
        StoreDeliveryUser storeDeliveryUser = deliveryUserAssignmentService.assignStoreDeliveryUser(kafkaRequireAddressToHubDto.getArriveHubId());
        log.info("Ïä§ÌÜ†Ïñ¥ ÎîúÎ¶¨Î≤ÑÎ¶¨ Ïú†Ï†Ä Í∞ÄÏ†∏Ïò§Í∏∞ ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!");
        // deliveryÏóê ÏúÑÏóêÏÑú Î∞õÏïÑÏò® ÎÇ¥Ïö© Ï†ÄÏû•!
        Delivery delivery = Delivery.of(hubRouteDto,kafkaRequireAddressToHubDto,storeDeliveryUser);
        deliveryRepository.save(delivery);
        log.info("Î∞∞Îã¨Ïóê Ï†ÄÏû• ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!");

        StringBuilder productName=new StringBuilder();
        List<ProductRequestDto> productRequestDto = kafkaRequireAddressToHubDto.getProducts();
        for(int i=0; i<productRequestDto.size(); i++){

            productName.append(productRequestDto.get(i).getProductName());
            if(i!=productRequestDto.size()-1){
                productName.append(", ");
            }
        }
        log.info("ÏÉÅÌíà ÎßåÎì§Í∏∞ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!");
        log.info("Î∞©Î¨∏Ìï¥Ïïº ÌïòÎäî ÌóàÎ∏å Í∞ØÏàò");
        log.info(hubRouteDto.getVisitHubName().size()+"Î∞©Î¨∏Ìï¥Ïïº ÌïòÎäî ÌóàÎ∏å Í∞ØÏàò");
        // departÏôÄ arriveÍ∞Ä Í∞ôÏùÄ Í≤ΩÏö∞Îäî Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
        for(int i=0; i<hubRouteDto.getVisitHubName().size()-1; i++){
            // Ïó¨Í∏∞Ïóê ÏãúÌÄÄÏä§ ÎÑ£Ïñ¥Ï§òÏïºÌï®
            // ÏöîÏ≤≠Ìï† Îïå, 0Î≤àÏß∏, 1Î≤àÏß∏ Í∞ôÏù¥ Î≥¥ÎÇ¥Ï§òÏïºÌï®
            log.info("hello!!!!!!!!!!!!!!!!!!!!!!!!");
            String depart = hubRouteDto.getVisitHubName().get(i);
            String arrive = hubRouteDto.getVisitHubName().get(i+1);
            log.info("depart!!!!!!"+depart+"arrive!!!!!"+arrive);
            HubDeliveryUser hubDeliveryUser = deliveryUserAssignmentService.assignHubDeliveryUser();
            log.info("ÌóàÎ∏å ÎîúÎ¶¨Î≤ÑÎ¶¨ Ïú†Ï†Ä ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!!!");
            HubDirectDto realHubDirectDto = deliveryDetailService.getDirectHub(depart,arrive);
            log.info("Ïã§Ï†ú Í≤ΩÎ°ú Î°úÏßÅ ÏÑ±Í≥µ!!!!!!!!!!!!!!!!!!!!!!!!");
            HubDirectDto expectedHubDirectDto = hubClient.getDirectHub(depart,arrive);
            DeliveryDetail deliveryDetail = DeliveryDetail.of(hubDeliveryUser, realHubDirectDto,expectedHubDirectDto,i+1, kafkaRequireAddressToHubDto.getOrderId());
            deliveryDetailRepository.save(deliveryDetail);
        }
        log.info("\uD83C\uDFAF Î™©Ìëú ÎèÑÎã¨! \uD83C\uDFAF Î™©Ìëú ÎèÑÎã¨! \uD83C\uDFAF Î™©Ìëú ÎèÑÎã¨! \uD83C\uDFAF Î™©Ìëú ÎèÑÎã¨! \uD83C\uDFAF Î™©Ìëú ÎèÑÎã¨!");
        slackMessageProducer.slackMessageEvent(slackMessageInfoDTO.of(hubRouteDto, storeDeliveryUser, kafkaRequireAddressToHubDto,productName.toString()));
    }
}
